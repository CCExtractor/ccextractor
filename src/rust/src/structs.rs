#[derive(Debug, Default)]
pub struct CcxBoundaryTime {
    pub hh: u32,
    pub mm: u32,
    pub ss: u32,
    pub time_in_ms: u32,
    pub set: bool,
}

#[derive(Debug, Default)]
pub struct CcxDecoder608Report {
    pub xds: bool,
    pub cc_channels: [u8; 4],
}

#[derive(Debug, Default)]
pub struct CcxDecoder608Settings {
    pub direct_rollup: i32,
    pub force_rollup: i32,
    pub no_rollup: bool,
    pub default_color: CcxDecoder608ColorCode,
    pub screens_to_process: u32,
    pub report: Option<&'static CcxDecoder608Report>,
}

pub const CCX_DTVCC_MAX_SERVICES: usize = 63;

impl Default for CcxFrameType {
    fn default() -> Self {
        Self::ResetOrUnknown
    }
}

#[derive(Debug)]
pub enum CcxFrameType {
    ResetOrUnknown = 0,
    IFrame = 1,
    PFrame = 2,
    BFrame = 3,
    DFrame = 4,
}

#[derive(Debug, Default)]
pub struct CcxCommonTimingCtx {
    pub pts_set: u8,          // 0 = No, 1 = received, 2 = min_pts set
    pub min_pts_adjusted: u8, // 0 = No, 1=Yes (don't adjust again)
    pub current_pts: i64,
    pub current_picture_coding_type: CcxFrameType,
    pub current_tref: i32, // Store temporal reference of current frame
    pub min_pts: i64,
    pub max_pts: i64,
    pub sync_pts: i64,
    pub minimum_fts: i64,     // No screen should start before this FTS
    pub fts_now: i64,         // Time stamp of current file (w/ fts_offset, w/o fts_global)
    pub fts_offset: i64,      // Time before first sync_pts
    pub fts_fc_offset: i64,   // Time before first GOP
    pub fts_max: i64,         // Remember the maximum fts that we saw in current file
    pub fts_global: i64,      // Duration of previous files (-ve mode)
    pub sync_pts2fts_set: u8, // 0 = No, 1 = Yes
    pub sync_pts2fts_fts: i64,
    pub sync_pts2fts_pts: i64,
    pub pts_reset: u8, // 0 = No, 1 = Yes. PTS resets when current_pts is lower than prev
}

impl Default for CcxDecoderDtvccSettings {
    fn default() -> Self {
        Self {
            enabled: false,
            print_file_reports: false,
            no_rollup: false,
            report: None,
            active_services_count: 0,
            services_enabled: [false; CCX_DTVCC_MAX_SERVICES],
            timing: CcxCommonTimingCtx::default(),
        }
    }
}

#[derive(Debug)]
pub struct CcxDecoderDtvccSettings {
    pub enabled: bool,
    pub print_file_reports: bool,
    pub no_rollup: bool,
    pub report: Option<&'static CcxDecoderDtvccReport>,
    pub active_services_count: usize,
    pub services_enabled: [bool; CCX_DTVCC_MAX_SERVICES],
    pub timing: CcxCommonTimingCtx,
}

impl Default for CcxDecoderDtvccReport {
    fn default() -> Self {
        Self {
            reset_count: 0,
            services: [0; CCX_DTVCC_MAX_SERVICES],
        }
    }
}

#[derive(Debug)]

pub struct CcxDecoderDtvccReport {
    pub reset_count: usize,
    pub services: [u32; CCX_DTVCC_MAX_SERVICES],
}

#[derive(Debug, Default)]
pub struct CcxEncodersTranscriptFormat {
    pub show_start_time: bool,
    pub show_end_time: bool,
    pub show_mode: bool,
    pub show_cc: bool,
    pub relative_timestamp: bool,
    pub xds: bool,
    pub use_colors: bool,
    pub is_final: bool,
}

impl Default for CcxOutputDateFormat {
    fn default() -> Self {
        Self::None
    }
}

#[derive(Debug, PartialEq)]
pub enum CcxOutputDateFormat {
    None = 0,
    HHMMSS = 1,
    Seconds = 2,
    Date = 3,
    HHMMSSMS = 4, // HH:MM:SS,MILIS (.srt style)
}

impl Default for CcxStreamMode {
    fn default() -> Self {
        Self::ElementaryOrNotFound
    }
}

#[derive(Debug)]
pub enum CcxStreamMode {
    ElementaryOrNotFound = 0,
    Transport = 1,
    Program = 2,
    Asf = 3,
    McpoodlesRaw = 4,
    Rcwt = 5, // Raw Captions With Time, not used yet.
    Myth = 6, // Use the myth loop
    Mp4 = 7,  // MP4, ISO-
    #[cfg(feature = "wtv_debug")]
    HexDump = 8, // Hexadecimal dump generated by wtvccdump
    Wtv = 9,
    #[cfg(feature = "enable_ffmpeg")]
    Ffmpeg = 10,
    Gxf = 11,
    Mkv = 12,
    Mxf = 13,
    Autodetect = 16,
}
impl Default for CcxCodeType {
    fn default() -> Self {
        Self::None
    }
}

#[derive(Debug)]
pub enum CcxCodeType {
    Any = 0,
    Teletext = 1,
    Dvb = 2,
    IsdbCc = 3,
    AtscCc = 4,
    None = 5,
}

impl Default for CcxDemuxerCfg {
    fn default() -> Self {
        Self {
            m2ts: false,
            auto_stream: CcxStreamMode::default(),
            codec: CcxCodeType::default(),
            ts_autoprogram: false,
            ts_allprogram: false,
            ts_cappids: [0; 128],
            nb_ts_cappid: 0,
            ts_forced_cappid: 0,
            ts_forced_program: 0,
            ts_forced_program_selected: false,
            ts_datastreamtype: 0,
            ts_forced_streamtype: 0,
        }
    }
}

#[derive(Debug)]
pub struct CcxDemuxerCfg {
    pub m2ts: bool,
    pub auto_stream: CcxStreamMode,
    pub codec: CcxCodeType,
    pub ts_autoprogram: bool,
    pub ts_allprogram: bool,
    pub ts_cappids: [u32; 128],
    pub nb_ts_cappid: usize,
    pub ts_forced_cappid: u32,
    pub ts_forced_program: u32,
    pub ts_forced_program_selected: bool,
    pub ts_datastreamtype: u32,
    pub ts_forced_streamtype: u32,
}

impl Default for CcxOutputFormat {
    fn default() -> Self {
        Self::Raw
    }
}

#[derive(Debug)]
pub enum CcxOutputFormat {
    Raw = 0,
    Srt = 1,
    Sami = 2,
    Transcript = 3,
    Rcwt = 4,
    Null = 5,
    Smptett = 6,
    Spupng = 7,
    Dvdraw = 8, // See -d at http://www.theneitherworld.com/mcpoodle/SCC_TOOLS/DOCS/SCC_TOOLS.HTML#CCExtract
    Webvtt = 9,
    SimpleXml = 10,
    G608 = 11,
    Curl = 12,
    Ssa = 13,
    Mcc = 14,
    Scc = 15,
    Ccd = 16,
}

impl Default for CcxEncodingType {
    fn default() -> Self {
        Self::Unicode
    }
}

#[derive(Debug)]
pub enum CcxEncodingType {
    Unicode = 0,
    Latin1 = 1,
    Utf8 = 2,
    Ascii = 3,
}

impl Default for CcxEncoderCfg {
    fn default() -> Self {
        Self {
            extract: false,
            dtvcc_extract: false,
            gui_mode_reports: false,
            output_filename: String::default(),
            write_format: CcxOutputFormat::default(),
            keep_output_closed: false,
            force_flush: false,
            append_mode: false,
            ucla: false,
            encoding: CcxEncodingType::default(),
            date_format: CcxOutputDateFormat::default(),
            millis_separator: char::default(),
            autodash: false,
            trim_subs: false,
            sentence_cap: false,
            splitbysentence: false,
            curlposturl: None,
            filter_profanity: false,
            with_semaphore: false,
            start_credits_text: String::default(),
            end_credits_text: String::default(),
            startcreditsnotbefore: CcxBoundaryTime::default(),
            startcreditsnotafter: CcxBoundaryTime::default(),
            startcreditsforatleast: CcxBoundaryTime::default(),
            startcreditsforatmost: CcxBoundaryTime::default(),
            endcreditsforatleast: CcxBoundaryTime::default(),
            endcreditsforatmost: CcxBoundaryTime::default(),
            transcript_settings: CcxEncodersTranscriptFormat::default(),
            send_to_srv: 0,
            no_bom: false,
            first_input_file: String::default(),
            multiple_files: false,
            no_font_color: false,
            no_type_setting: false,
            cc_to_stdout: false,
            line_terminator_lf: false,
            subs_delay: 0,
            program_number: 0,
            in_format: 0,
            nospupngocr: false,
            force_dropframe: false,
            render_font: String::default(),
            render_font_italics: String::default(),
            services_enabled: [false; 63],
            services_charsets: vec![],
            all_services_charset: String::default(),
            extract_only_708: false,
        }
    }
}

#[derive(Debug)]
pub struct CcxEncoderCfg {
    pub extract: bool,
    pub dtvcc_extract: bool,
    pub gui_mode_reports: bool,
    pub output_filename: String,
    pub write_format: CcxOutputFormat,
    pub keep_output_closed: bool,
    pub force_flush: bool,
    pub append_mode: bool,
    pub ucla: bool,
    pub encoding: CcxEncodingType,
    pub date_format: CcxOutputDateFormat,
    pub millis_separator: char,
    pub autodash: bool,
    pub trim_subs: bool,
    pub sentence_cap: bool,
    pub splitbysentence: bool,
    pub curlposturl: Option<String>,
    pub filter_profanity: bool,
    pub with_semaphore: bool,
    pub start_credits_text: String,
    pub end_credits_text: String,
    pub startcreditsnotbefore: CcxBoundaryTime,
    pub startcreditsnotafter: CcxBoundaryTime,
    pub startcreditsforatleast: CcxBoundaryTime,
    pub startcreditsforatmost: CcxBoundaryTime,
    pub endcreditsforatleast: CcxBoundaryTime,
    pub endcreditsforatmost: CcxBoundaryTime,
    pub transcript_settings: CcxEncodersTranscriptFormat,
    pub send_to_srv: u32,
    pub no_bom: bool,
    pub first_input_file: String,
    pub multiple_files: bool,
    pub no_font_color: bool,
    pub no_type_setting: bool,
    pub cc_to_stdout: bool,
    pub line_terminator_lf: bool,
    pub subs_delay: i64,
    pub program_number: u32,
    pub in_format: u8,
    pub nospupngocr: bool,
    pub force_dropframe: bool,
    pub render_font: String,
    pub render_font_italics: String,
    pub services_enabled: [bool; CCX_DTVCC_MAX_SERVICES],
    pub services_charsets: Vec<String>,
    pub all_services_charset: String,
    pub extract_only_708: bool,
}

#[derive(Debug, Default)]
pub struct CcxSOptions {
    pub extract: Option<i32>,
    pub no_rollup: bool,
    pub noscte20: bool,
    pub webvtt_create_css: bool,
    pub cc_channel: Option<i32>,
    pub buffer_input: bool,
    pub nofontcolor: bool,
    pub write_format: CcxOutputFormat,
    pub send_to_srv: bool,
    pub nohtmlescape: bool,
    pub notypesetting: bool,
    pub extraction_start: CcxBoundaryTime,
    pub extraction_end: CcxBoundaryTime,
    pub print_file_reports: bool,
    pub settings_608: CcxDecoder608Settings,
    pub settings_dtvcc: CcxDecoderDtvccSettings,
    pub is_608_enabled: Option<i32>,
    pub is_708_enabled: bool,
    pub millis_separator: char,
    pub binary_concat: bool,
    pub use_gop_as_pts: i32,
    pub fix_padding: bool,
    pub gui_mode_reports: bool,
    pub no_progress_bar: bool,
    pub sentence_cap_file: Option<String>,
    pub live_stream: Option<i32>,
    pub filter_profanity_file: Option<String>,
    pub messages_target: Option<i32>,
    pub timestamp_map: bool,
    pub dolevdist: Option<i32>,
    pub levdistmincnt: Option<u32>,
    pub levdistmaxpct: Option<u32>,
    pub investigate_packets: Option<i32>,
    pub fullbin: bool,
    pub nosync: bool,
    pub hauppauge_mode: bool,
    pub wtvconvertfix: bool,
    pub wtvmpeg2: bool,
    pub auto_myth: Option<i8>,
    pub mp4vidtrack: bool,
    pub extract_chapters: bool,
    pub usepicorder: bool,
    pub xmltv: Option<i32>,
    pub xmltvliveinterval: Option<i32>,
    pub xmltvoutputinterval: Option<i32>,
    pub xmltvonlycurrent: Option<i32>,
    pub keep_output_closed: bool,
    pub force_flush: bool,
    pub append_mode: bool,
    pub ucla: Option<i32>,
    pub tickertext: Option<i32>,
    pub hardsubx: Option<i32>,
    pub hardsubx_and_common: Option<i32>,
    pub dvblang: Option<String>,
    pub ocrlang: Option<String>,
    pub ocr_oem: Option<i32>,
    pub ocr_quantmode: Option<i32>,
    pub mkvlang: Option<String>,
    pub analyze_video_stream: bool,
    pub hardsubx_ocr_mode: Option<i32>,
    pub hardsubx_subcolor: Option<i32>,
    pub hardsubx_min_sub_duration: Option<f32>,
    pub hardsubx_detect_italics: Option<i32>,
    pub hardsubx_conf_thresh: Option<f32>,
    pub hardsubx_hue: Option<f32>,
    pub hardsubx_lum_thresh: Option<f32>,
    pub transcript_settings: CcxEncodersTranscriptFormat,
    pub date: CcxOutputDateFormat,
    pub format: Option<i32>,
    pub write_format_rewritten: bool,
    pub use_ass_instead_of_ssa: bool,
    pub use_webvtt_styling: bool,
    pub debug_mask: u64,
    pub debug_mask_on_debug: u64,
    pub udpsrc: Option<String>,
    pub udpaddr: Option<String>,
    pub udpport: Option<u32>,
    pub tcpport: Option<String>,
    pub tcp_password: Option<String>,
    pub tcp_desc: Option<String>,
    pub srv_addr: Option<String>,
    pub srv_port: Option<String>,
    pub noautotimeref: Option<i32>,
    pub input_source: CcxDatasource,
    pub output_filename: Option<String>,
    pub inputfile: Option<Vec<String>>,
    pub num_input_files: Option<i32>,
    pub demux_cfg: CcxDemuxerCfg,
    pub enc_cfg: CcxEncoderCfg,
    pub subs_delay: i32,
    pub cc_to_stdout: bool,
    pub pes_header_to_stdout: bool,
    pub ignore_pts_jumps: bool,
    pub multiprogram: bool,
    pub out_interval: Option<u32>,
    pub segment_on_key_frames_only: bool,
    pub curlposturl: Option<String>,
    pub sharing_enabled: Option<i32>,
    pub sharing_url: Option<String>,
    pub translate_enabled: Option<i32>,
    pub translate_langs: Option<String>,
    pub translate_key: Option<String>,
}

impl Default for HardsubxOcrMode {
    fn default() -> Self {
        Self::Frame
    }
}
pub enum HardsubxOcrMode {
    Frame = 0,
    Word = 1,
    Letter = 2,
}

impl Default for CcxDatasource {
    fn default() -> Self {
        Self::File
    }
}

#[derive(Debug, PartialEq)]
pub enum CcxDatasource {
    File = 0,
    Stdin = 1,
    Network = 2,
    Tcp = 3,
}

impl Default for CcxEia608Format {
    fn default() -> Self {
        Self::CcScreen
    }
}
pub enum CcxEia608Format {
    CcScreen,
    CcLine,
    Xds,
}

impl Default for CcModes {
    fn default() -> Self {
        Self::Text
    }
}

#[derive(Debug)]
pub enum CcModes {
    Popon = 0,
    Rollup2 = 1,
    Rollup3 = 2,
    Rollup4 = 3,
    Text = 4,
    Painton = 5,
    FakeRollup1 = 100,
}

impl Default for FontBits {
    fn default() -> Self {
        Self::Regular
    }
}

#[derive(Debug)]
pub enum FontBits {
    Regular = 0,
    Italics = 1,
    Underlined = 2,
    UnderlinedItalics = 3,
}

impl Default for CcxDecoder608ColorCode {
    fn default() -> Self {
        Self::Userdefined
    }
}

#[derive(Debug)]
pub enum CcxDecoder608ColorCode {
    White = 0,
    Green = 1,
    Blue = 2,
    Cyan = 3,
    Red = 4,
    Yellow = 5,
    Magenta = 6,
    Userdefined = 7,
    Black = 8,
    Transparent = 9,

    // Must keep at end
    Max,
}

#[derive(Copy, Clone, Debug)]
pub enum ExitCode {
    OK = 0,
    NoInputFiles = 2,
    TooManyInputFiles = 3,
    IncompatibleParameters = 4,
    UnableToDetermineFileSize = 6,
    MalformedParameter = 7,
    ReadError = 8,
    NoCaptions = 10,
    WithHelp = 11,
    NotClassified = 300,
    ErrorInCapitalizationFile = 501,
    BufferFull = 502,
    MissingASFHeader = 1001,
    MissingRCWTHeader = 1002,
    FileCreationFailed = 5,
    Unsupported = 9,
    NotEnoughMemory = 500,
    BugBug = 1000,
}

#[derive(Copy, Clone, Debug)]
pub enum CCXResult {
    Ok = 0,
    EAGAIN = -100,
    EOF = -101,
    EINVAL = -102,
    ENOSUPP = -103,
    ENOMEM = -104,
}

#[derive(Copy, Clone, Debug)]
pub enum HardsubxColorType {
    White = 0,
    Yellow = 1,
    Green = 2,
    Cyan = 3,
    Blue = 4,
    Magenta = 5,
    Red = 6,
    Custom = 7,
}
