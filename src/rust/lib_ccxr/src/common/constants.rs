use std::ffi::OsStr;

pub const DTVCC_MAX_SERVICES: usize = 63;

/// An enum of all the available formats for the subtitle output.
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum OutputFormat {
    Raw,
    Srt,
    Sami,
    Transcript,
    Rcwt,
    Null,
    SmpteTt,
    SpuPng,
    DvdRaw, // See -d at http://www.theneitherworld.com/mcpoodle/SCC_TOOLS/DOCS/SCC_TOOLS.HTML#CCExtract
    WebVtt,
    SimpleXml,
    G608,
    Curl,
    Ssa,
    Mcc,
    Scc,
    Ccd,
}

// AVC NAL types
pub enum AvcNalType {
    Unspecified0 = 0,
    CodedSliceNonIdrPicture1 = 1,
    CodedSlicePartitionA = 2,
    CodedSlicePartitionB = 3,
    CodedSlicePartitionC = 4,
    CodedSliceIdrPicture = 5,
    Sei = 6,
    SequenceParameterSet7 = 7,
    PictureParameterSet = 8,
    AccessUnitDelimiter9 = 9,
    EndOfSequence = 10,
    EndOfStream = 11,
    FillerData = 12,
    SequenceParameterSetExtension = 13,
    PrefixNalUnit = 14,
    SubsetSequenceParameterSet = 15,
    Reserved16 = 16,
    Reserved17 = 17,
    Reserved18 = 18,
    CodedSliceAuxiliaryPicture = 19,
    CodedSliceExtension = 20,
    Reserved21 = 21,
    Reserved22 = 22,
    Reserved23 = 23,
    Unspecified24 = 24,
    Unspecified25 = 25,
    Unspecified26 = 26,
    Unspecified27 = 27,
    Unspecified28 = 28,
    Unspecified29 = 29,
    Unspecified30 = 30,
    Unspecified31 = 31,
}

// MPEG-2 TS stream types
pub enum StreamType {
    Unknownstream = 0,
    /*
    The later constants are defined by MPEG-TS standard
    Explore at: https://exiftool.org/TagNames/M2TS.html
    */
    VideoMpeg1 = 0x01,
    VideoMpeg2 = 0x02,
    AudioMpeg1 = 0x03,
    AudioMpeg2 = 0x04,
    PrivateTableMpeg2 = 0x05,
    PrivateMpeg2 = 0x06,
    MhegPackets = 0x07,
    Mpeg2AnnexADsmCc = 0x08,
    ItuTH222_1 = 0x09,
    IsoIec13818_6TypeA = 0x0a,
    IsoIec13818_6TypeB = 0x0b,
    IsoIec13818_6TypeC = 0x0c,
    IsoIec13818_6TypeD = 0x0d,
    AudioAac = 0x0f,
    VideoMpeg4 = 0x10,
    VideoH264 = 0x1b,
    PrivateUserMpeg2 = 0x80,
    AudioAc3 = 0x81,
    AudioHdmvDts = 0x82,
    AudioDts = 0x8a,
}

pub enum MpegDescriptor {
    /*
    The later constants are defined by ETSI EN 300 468 standard
    Explore at: https://www.etsi.org/deliver/etsi_en/300400_300499/300468/01.11.01_60/en_300468v011101p.pdf
    */
    Registration = 0x05,
    DataStreamAlignment = 0x06,
    Iso639Language = 0x0a,
    VbiDataDescriptor = 0x45,
    VbiTeletextDescriptor = 0x46,
    TeletextDescriptor = 0x56,
    DvbSubtitle = 0x59,
    /* User defined */
    CaptionService = 0x86,
    DataComp = 0xfd,
}

pub enum DataSource {
    File,
    Stdin,
    Network,
    Tcp,
}

pub enum StreamMode {
    ElementaryOrNotFound = 0,
    Transport = 1,
    Program = 2,
    Asf = 3,
    McpoodlesRaw = 4,
    Rcwt = 5, // raw captions with time, not used yet.
    Myth = 6, // use the myth loop
    Mp4 = 7,  // mp4, iso-
    #[cfg(feature = "wtv_debug")]
    HexDump = 8, // hexadecimal dump generated by wtvccdump
    Wtv = 9,
    #[cfg(feature = "enable_ffmpeg")]
    Ffmpeg = 10,
    Gxf = 11,
    Mkv = 12,
    Mxf = 13,
    Autodetect = 16,
}

pub enum BufferdataType {
    Unknown,
    Pes,
    Raw,
    H264,
    Hauppage,
    Teletext,
    PrivateMpeg2Cc,
    DvbSubtitle,
    IsdbSubtitle,
    /* BUffer where cc data contain 3 byte cc_valid ccdata 1 ccdata 2 */
    RawType,
    DvdSubtitle,
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum FrameType {
    ResetOrUnknown,
    IFrame,
    PFrame,
    BFrame,
    DFrame,
}

pub enum Codec {
    Teletext,
    Dvb,
    IsdbCc,
    AtscCc,
}

pub enum SelectCodec {
    All,
    Some(Codec),
    None,
}

/// Caption Distribution Packet
pub enum CdpSectionType {
    /*
    The later constants are defined by SMPTE ST 334
    Purchase for 80$ at: https://ieeexplore.ieee.org/document/8255806
    */
    Data = 0x72,
    SvcInfo = 0x73,
    Footer = 0x74,
}

pub enum Language {
    Und, // Undefined
    Eng,
    Afr,
    Amh,
    Ara,
    Asm,
    Aze,
    Bel,
    Ben,
    Bod,
    Bos,
    Bul,
    Cat,
    Ceb,
    Ces,
    Chs,
    Chi,
    Chr,
    Cym,
    Dan,
    Deu,
    Dzo,
    Ell,
    Enm,
    Epo,
    Equ,
    Est,
    Eus,
    Fas,
    Fin,
    Fra,
    Frk,
    Frm,
    Gle,
    Glg,
    Grc,
    Guj,
    Hat,
    Heb,
    Hin,
    Hrv,
    Hun,
    Iku,
    Ind,
    Isl,
    Ita,
    Jav,
    Jpn,
    Kan,
    Kat,
    Kaz,
    Khm,
    Kir,
    Kor,
    Kur,
    Lao,
    Lat,
    Lav,
    Lit,
    Mal,
    Mar,
    Mkd,
    Mlt,
    Msa,
    Mya,
    Nep,
    Nld,
    Nor,
    Ori,
    Osd,
    Pan,
    Pol,
    Por,
    Pus,
    Ron,
    Rus,
    San,
    Sin,
    Slk,
    Slv,
    Spa,
    Sqi,
    Srp,
    Swa,
    Swe,
    Syr,
    Tam,
    Tel,
    Tgk,
    Tgl,
    Tha,
    Tir,
    Tur,
    Uig,
    Ukr,
    Urd,
    Uzb,
    Vie,
    Yid,
}

impl OutputFormat {
    /// Returns the file extension for the output format if it is a file based format.
    pub fn file_extension(&self) -> Option<&OsStr> {
        match self {
            OutputFormat::Raw => Some(OsStr::new(".raw")),
            OutputFormat::Srt => Some(OsStr::new(".srt")),
            OutputFormat::Sami => Some(OsStr::new(".smi")),
            OutputFormat::Transcript => Some(OsStr::new(".txt")),
            OutputFormat::Rcwt => Some(OsStr::new(".bin")),
            OutputFormat::Null => None,
            OutputFormat::SmpteTt => Some(OsStr::new(".ttml")),
            OutputFormat::SpuPng => Some(OsStr::new(".xml")),
            OutputFormat::DvdRaw => Some(OsStr::new(".dvdraw")),
            OutputFormat::WebVtt => Some(OsStr::new(".vtt")),
            OutputFormat::SimpleXml => Some(OsStr::new(".xml")),
            OutputFormat::G608 => Some(OsStr::new(".g608")),
            OutputFormat::Curl => None,
            OutputFormat::Ssa => Some(OsStr::new(".ass")),
            OutputFormat::Mcc => Some(OsStr::new(".mcc")),
            OutputFormat::Scc => Some(OsStr::new(".scc")),
            OutputFormat::Ccd => Some(OsStr::new(".ccd")),
        }
    }
}

impl Language {
    pub fn to_str(&self) -> &'static str {
        match self {
            Language::Und => "und", // Undefined
            Language::Eng => "eng",
            Language::Afr => "afr",
            Language::Amh => "amh",
            Language::Ara => "ara",
            Language::Asm => "asm",
            Language::Aze => "aze",
            Language::Bel => "bel",
            Language::Ben => "ben",
            Language::Bod => "bod",
            Language::Bos => "bos",
            Language::Bul => "bul",
            Language::Cat => "cat",
            Language::Ceb => "ceb",
            Language::Ces => "ces",
            Language::Chs => "chs",
            Language::Chi => "chi",
            Language::Chr => "chr",
            Language::Cym => "cym",
            Language::Dan => "dan",
            Language::Deu => "deu",
            Language::Dzo => "dzo",
            Language::Ell => "ell",
            Language::Enm => "enm",
            Language::Epo => "epo",
            Language::Equ => "equ",
            Language::Est => "est",
            Language::Eus => "eus",
            Language::Fas => "fas",
            Language::Fin => "fin",
            Language::Fra => "fra",
            Language::Frk => "frk",
            Language::Frm => "frm",
            Language::Gle => "gle",
            Language::Glg => "glg",
            Language::Grc => "grc",
            Language::Guj => "guj",
            Language::Hat => "hat",
            Language::Heb => "heb",
            Language::Hin => "hin",
            Language::Hrv => "hrv",
            Language::Hun => "hun",
            Language::Iku => "iku",
            Language::Ind => "ind",
            Language::Isl => "isl",
            Language::Ita => "ita",
            Language::Jav => "jav",
            Language::Jpn => "jpn",
            Language::Kan => "kan",
            Language::Kat => "kat",
            Language::Kaz => "kaz",
            Language::Khm => "khm",
            Language::Kir => "kir",
            Language::Kor => "kor",
            Language::Kur => "kur",
            Language::Lao => "lao",
            Language::Lat => "lat",
            Language::Lav => "lav",
            Language::Lit => "lit",
            Language::Mal => "mal",
            Language::Mar => "mar",
            Language::Mkd => "mkd",
            Language::Mlt => "mlt",
            Language::Msa => "msa",
            Language::Mya => "mya",
            Language::Nep => "nep",
            Language::Nld => "nld",
            Language::Nor => "nor",
            Language::Ori => "ori",
            Language::Osd => "osd",
            Language::Pan => "pan",
            Language::Pol => "pol",
            Language::Por => "por",
            Language::Pus => "pus",
            Language::Ron => "ron",
            Language::Rus => "rus",
            Language::San => "san",
            Language::Sin => "sin",
            Language::Slk => "slk",
            Language::Slv => "slv",
            Language::Spa => "spa",
            Language::Sqi => "sqi",
            Language::Srp => "srp",
            Language::Swa => "swa",
            Language::Swe => "swe",
            Language::Syr => "syr",
            Language::Tam => "tam",
            Language::Tel => "tel",
            Language::Tgk => "tgk",
            Language::Tgl => "tgl",
            Language::Tha => "tha",
            Language::Tir => "tir",
            Language::Tur => "tur",
            Language::Uig => "uig",
            Language::Ukr => "ukr",
            Language::Urd => "urd",
            Language::Uzb => "uzb",
            Language::Vie => "vie",
            Language::Yid => "yid",
        }
    }
}
