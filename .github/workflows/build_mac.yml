name: Build CCExtractor on Mac

on:
  workflow_dispatch:
  push:
    paths:
    - '.github/workflows/build_mac.yml'
    - '**.c'
    - '**.h'
    - '**Makefile**'
    - 'mac/**'
    - 'package_creators/**'
    - 'src/rust/**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
    - '.github/workflows/build_mac.yml'
    - '**.c'
    - '**.h'
    - '**Makefile**'
    - 'mac/**'
    - 'package_creators/**'
    - 'src/rust/**'
jobs:
  build_shell:
    runs-on: macos-latest
    steps:
    - name: Install dependencies
      run: brew install pkg-config autoconf automake libtool tesseract leptonica gpac
    - uses: actions/checkout@v4
    - name: build
      run: ./build.command
      working-directory: ./mac
    - name: Display version information
      run: ./ccextractor --version
      working-directory: ./mac
    - name: Prepare artifacts
      run: mkdir ./mac/artifacts
    - name: Copy release artifact
      run: cp ./mac/ccextractor ./mac/artifacts/
    - uses: actions/upload-artifact@v4
      with:
        name: CCExtractor mac build
        path: ./mac/artifacts
  build_autoconf:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: brew install pkg-config autoconf automake libtool gpac
    - name: run autogen
      run: ./autogen.sh
      working-directory: ./mac
    - name: configure
      run: ./configure --enable-debug
      working-directory: ./mac
    - name: make
      run: make
      working-directory: ./mac
    - name: Display version information
      run: ./ccextractor --version
      working-directory: ./mac
  cmake:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: dependencies
      run: brew install gpac
    - uses: actions/checkout@v4
    - name: cmake
      run: mkdir build && cd build && cmake ../src
    - name: build
      run: make -j$(nproc)
      working-directory: build
    - name: Display version information
      run: ./build/ccextractor --version
  cmake_ocr_hardsubx:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: brew install coreutils pkg-config autoconf automake libtool tesseract leptonica gpac
    
    - name: Cache vcpkg
      id: cache
      uses: actions/cache@v3
      with:
        path: |
          ${{ github.workspace }}/ffmpeg_prebuilt
          ${{ github.workspace }}/x264_prebuilt

    - name: Build x264
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/mirror/x264 --depth 1
        cd x264
        mkdir build
        cd build
        ../configure \
          --prefix=${PWD}/build \
          --disable-cli \
          --enable-static \
          --enable-strip \
          --enable-pic \
          --disable-asm \
          --extra-cflags=-mmacosx-version-min=10.9
        make -j$(nproc)
        make install
        cp -r ./build ~/x264_prebuilt
        cd ../..

    - name: Build FFmpeg dylib
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/ffmpeg/ffmpeg --depth 1 --single-branch --branch release/6.1
        cd ffmpeg
        mkdir build
        cd build
        ../configure --help
        CFLAGS="-mmacosx-version-min=10.9" PKG_CONFIG_PATH="${HOME}/x264_prebuilt/lib/pkgconfig" ../configure \
          --prefix=${PWD}/build \
          --enable-small \
          --disable-debug \
          --disable-programs \
          --disable-postproc \
          --disable-doc \
          --disable-hwaccels \
          --disable-parsers \
          --disable-bsfs \
          --disable-x86asm \
          --disable-indevs \
          --disable-outdevs \
          --disable-devices \
          --disable-decoders \
          --enable-decoder=aac,ac3,flac,mp3,hevc,vp8,mpeg4,h263,h264,ass,srt,text \
          --disable-encoders \
          --enable-encoder=aac,ac3,flac,libx264,ass,ssa,srt,text,mpeg4 \
          --disable-filters \
          --enable-filter=scale \
          --enable-gpl \
          --enable-libx264 \
          --enable-pic
        make -j$(nproc)
        make install
        cd build/lib/
        cp ~/x264_prebuilt/lib/libx264.a .
        gcc -shared -o libffmpeg.dylib \
          -framework CoreFoundation \
          -framework CoreMedia \
          -framework CoreVideo \
          -framework Security \
          -framework VideoToolbox \
          -lbz2 \
          -liconv \
          -lz \
          -Wl,-all_load *.a \
          -mmacosx-version-min=10.9
        cd ../..
        cp -r ./build ~/ffmpeg_prebuilt
        cd ../..
    - name: Move ffmpeg to current github.workspace
      run: cp -r ~/ffmpeg_prebuilt ${{ github.workspace }}/ffmpeg_prebuilt
    - name: cmake
      env:
        FFMPEG_INCLUDE_DIR: ${{ github.workspace }}/ffmpeg_prebuilt/include
        FFMPEG_DLL_PATH: ${{ github.workspace }}/ffmpeg_prebuilt/lib/libffmpeg.dylib
      run: |
        mkdir build && cd build
        cmake -DWITH_OCR=ON -DWITH_HARDSUBX=ON ../src
    - name: build
      env:
        FFMPEG_INCLUDE_DIR: ${{ github.workspace }}/ffmpeg_prebuilt/include
        FFMPEG_DLL_PATH: ${{ github.workspace }}/ffmpeg_prebuilt/lib/libffmpeg.dylib
      run: |
        make -j$(nproc)
      working-directory: build
    - name: Display version information
      run: ./build/ccextractor --version
  build_rust:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: cache 
        uses: actions/cache@v4
        with:
          path: |
            src/rust/.cargo/registry
            src/rust/.cargo/git
            src/rust/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: build
        run: cargo build 
        working-directory: ./src/rust